class Solution {
   public int minimumEffortPath(int[][] heights) {
        if (heights == null || heights.length == 0 || heights[0].length == 0) {
            return 0;
        }

        int rows = heights.length;
        int cols = heights[0].length;

        int[][] dirs = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};

        PriorityQueue<int[]> pq = new PriorityQueue<>((edge1, edge2) -> edge1[2] - edge2[2]);

        pq.offer(new int[]{0, 0, 0});

        int[] dist = new int[rows * cols];
        Arrays.fill(dist, Integer.MAX_VALUE);

        dist[0] = 0;

        boolean[][] vis = new boolean[rows][cols];

        while (!pq.isEmpty()) {
            int[] edge = pq.poll();

            int x = edge[0];
            int y = edge[1];
            int d = edge[2];

            if (vis[x][y]) {
                continue;
            }

            if (x == rows - 1 && y == cols - 1) {
                break;
            }

            vis[x][y] = true;
            for (int[] dir : dirs) {
                int nextX = x + dir[0];
                int nextY = y + dir[1];

                if (nextX >= 0 && nextX < rows && nextY >= 0 && nextY < cols
                        && Math.max(d, Math.abs(heights[nextX][nextY] - heights[x][y])) < dist[nextX * cols + nextY]) {
                    dist[nextX * cols + nextY] = Math.max(d, Math.abs(heights[nextX][nextY] - heights[x][y]));
                    pq.offer(new int[]{nextX, nextY, dist[nextX * cols + nextY]});
                }
            }
        }

        return dist[rows * cols - 1];
    }
}
