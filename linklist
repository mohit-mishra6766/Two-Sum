import java.util.*;
public class insertionLinklist {
	static class Node{
		int data;
		Node next;
		Node(int data){
			this.data=data;
			this.next=null;
		}
	}
	Node head=null ;
	Node tail=null;
	public void creater() {
		int data,n,p,m;
		Scanner sc = new Scanner(System.in);
		do {
			System.out.println("enter the data");
			data=sc.nextInt();
			Node new_node=new Node(data);
			if(head==null) {
				head=new_node;
				tail=new_node;
				new_node.next=head;
			}
			else {
				System.out.println("if you want add the beginning then press 1, at the end then 2 , at the any point then 3");
				m=sc.nextInt();
				switch(m) {
				case 1:
					new_node.next=head;
					head=new_node;
					tail.next=head;
					break;
				case 2:
					
					tail.next=new_node;
					tail=new_node;
					new_node.next=head;
					break;
				case 3:
					System.out.println("enter the specific place where you want to add it");
					p=sc.nextInt();
					Node temp=head;
					for(int i=0;i<p-2;i++) {
						temp=temp.next;
						
					}
					new_node.next=temp.next;
					temp=new_node;
					break;
					
					
					
					
				}
			}
			System.out.println("if you add the data then press 1");
			n=sc.nextInt();
		}
		while(n==1);
	}
	public void delete() {
		int m,p,n;
		Scanner sc = new Scanner(System.in);
		do {
			System.out.println("if you want the delete form the beginning then press 1, at the end then 2, at the any point 3");
			m=sc.nextInt();
			switch(m) {
			case 1:
				Node temp= head;
				temp=temp.next;
				temp=head;
				tail.next=head;
				break;
			case 2:
				Node temp2= head;
				Node ptr=temp2.next;
				while(ptr.next!=head) {
					temp2=ptr;
					ptr=ptr.next;
				}
				temp2.next=head;
				tail=temp2;
				break;
			case 3:
				System.out.println("enter the data where you delete");
				p=sc.nextInt();
				Node temp1=head;
				Node ptr1=temp1.next;
				for(int i=0;i<p-2;i++) {
					temp1=ptr1;
					ptr1=ptr1.next;
				}
				temp1.next=ptr1.next;
				break;
						
				
			}
		
		System.out.println("if you want to delte the item then press 1");
		n=sc.nextInt();
	}
	while(n==1);
}
	public void transverser() {
		Node temp=head;
		if(head==null) {
			System.out.println("ll does notexist ");
		}
		else {
			do {
				System.out.println(temp.data);
				temp=temp.next;
			}
			while(temp!=head);
		}
	}

	public static void main(String[] args) {
		insertionLinklist s= new insertionLinklist();
		s.creater();
		s.delete();
		s.transverser();
		// TODO Auto-generated method stub

	}

}
